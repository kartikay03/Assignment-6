Q-1
n = int(input("Enter any number: "))
sum1 = 0
for i in range(1, n):
    if(n % i == 0):
        sum1 = sum1 + i
if (sum1 == n):
    print("The number is a Perfect number!")
else:
    print("The number is not a Perfect number!")
    
Q-2
my_str = 'madam'

my_str = my_str.casefold()

rev_str = reversed(my_str)

if list(my_str) == list(rev_str):
   print("The string is a palindrome.")
else:
   print("The string is not a palindrome.")
   
Q-3
from math import factorial

def pascal_tri(numRows):
  '''Print Pascal's triangle with numRows.'''
  for i in range(numRows):
    # loop to get leading spaces
    for j in range(numRows-i+1):
        print(end=" ")
    
    # loop to get elements of row i
    for j in range(i+1):
		  # nCr = n!/((n-r)!*r!)
        print(factorial(i)//(factorial(j)*factorial(i-j)), end=" ")

	 # print each row in a new line
    print("\n")

pascal_tri(5)

Q-4
#Python program to check whether a string is a pangram or not.
def ispangram(str):
    alphabet = "abcdefghijklmnopqrstuvwxyz"
    for char in alphabet:
        if char not in str.lower():
            return False

    return True
string = 'the quick brown fox jumps over the lazy dog'
if (ispangram(string) == True):
    print("Yes")
else:
    print("No")
    
Q-5
 def word(x):
    for i in range(len(x) + 1):
        for j in range(len(x) - 1):
            if x[j][0] > x[j + 1][0]:
                x[j], x[j + 1] = x[j + 1], x[j]

    string = ("-").join(x)
    print("Sequence After sorting :- ", string)


str = input("Enter hyphen-separated sequence of words :- ")
a = str.split("-")
word(a)

Q-6
def student_data(student_id, **kwargs):
    print(f'\nStudent ID: {student_id}')
    if 'student_name' in kwargs:
        print(f"Student Name: $ {kwargs['student_name']}")
    if 'student_name' and 'student_class' in kwargs:
        print(f"\nStudent Name: $ {kwargs['student_name']}")
        print(f"Student Class: $ {kwargs['student_class']}")
student_data(student_id='21102011', student_name='Kartikay Bhatia')
student_data(student_id='21102011', student_name='Kartikay Bhatia', student_class='1st year')

Q-7
class Student:
    pass
class Marks:
    pass
student1 = Student()
marks1 = Marks()
print(isinstance(student1, Student))
print(isinstance(marks1, Student))
print(isinstance(marks1, Marks))
print(isinstance(student1, Marks))
print("\nCheck whether the said classes are subclasses of the built-in object class or not.")
print(issubclass(Student, object))
print(issubclass(Marks, object))

Q-8
class solution:
    def sumthree(self,nums):
        nums=sorted(nums)
        result=[]
        i=0
        while i < len(nums)-2 :
            j , k = i+1 , len(nums)-1
            while j<k:
                if nums[i] + nums[j] + nums[k] < 0:
                    j+=1
                elif nums[i] + nums[j] + nums[k] >0 :
                    k-=1
                else :
                    result.append([nums[i] ,nums[j] ,nums[k]])
                    j+=1
                    k-=1
                    while j<k and nums[j] == nums[j -1]:
                        j+=1
                    while j<k and nums[k]== nums[k+1] :
                        k-=1
            i+=1
            while i<len(nums)-2 and nums[i]==nums[i-1]:
                i+=1
        return result
print(solution().sumthree([-25, -10, -7, -3, 2, 4, 8, 10]))

Q-9
class sol:
    def validity(self,str1):
        accum=[]
        parentheses={"(":")","[":"]","{":"}"}
        for i in str1 :
            if i in parentheses:
                accum.append(i)
            elif len(accum)==0 or parentheses[accum.pop()]!=i:
                return False
        return len(accum)==0
print(sol().validity("((("))
